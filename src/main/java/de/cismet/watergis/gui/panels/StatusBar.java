/***************************************************
*
* cismet GmbH, Saarbruecken, Germany
*
*              ... and it just works.
*
****************************************************/
/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package de.cismet.watergis.gui.panels;

import org.apache.log4j.Logger;

import java.awt.EventQueue;

import de.cismet.cismap.commons.Crs;
import de.cismet.cismap.commons.interaction.CismapBroker;
import de.cismet.cismap.commons.interaction.StatusListener;
import de.cismet.cismap.commons.interaction.events.StatusEvent;

/**
 * DOCUMENT ME!
 *
 * @author   Gilles Baatz
 * @version  $Revision$, $Date$
 */
public class StatusBar extends javax.swing.JPanel implements StatusListener {

    //~ Static fields/initializers ---------------------------------------------

    private static final Logger LOG = Logger.getLogger(StatusBar.class);

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.Box.Filler filler1;
    private javax.swing.JLabel lblCoordinates;
    private javax.swing.JPanel pnlCoordinates;
    // End of variables declaration//GEN-END:variables

    //~ Constructors -----------------------------------------------------------

    /**
     * Creates a new StatusBar object.
     */
    public StatusBar() {
        initComponents();
        lblCoordinates.setText(""); // NOI18N
    }

    //~ Methods ----------------------------------------------------------------

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
     * content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0),
                new java.awt.Dimension(0, 0),
                new java.awt.Dimension(32767, 0));
        pnlCoordinates = new javax.swing.JPanel();
        lblCoordinates = new javax.swing.JLabel();

        setMaximumSize(new java.awt.Dimension(32769, 20));
        setMinimumSize(new java.awt.Dimension(200, 20));
        setPreferredSize(new java.awt.Dimension(500, 20));
        addMouseListener(new java.awt.event.MouseAdapter() {

                @Override
                public void mouseClicked(final java.awt.event.MouseEvent evt) {
                    formMouseClicked(evt);
                }
            });
        setLayout(new java.awt.GridBagLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.weightx = 1.0;
        add(filler1, gridBagConstraints);

        pnlCoordinates.setLayout(new java.awt.BorderLayout());

        org.openide.awt.Mnemonics.setLocalizedText(
            lblCoordinates,
            org.openide.util.NbBundle.getMessage(StatusBar.class, "StatusBar.lblCoordinates.text")); // NOI18N
        pnlCoordinates.add(lblCoordinates, java.awt.BorderLayout.CENTER);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 2);
        add(pnlCoordinates, gridBagConstraints);
    } // </editor-fold>//GEN-END:initComponents

    /**
     * DOCUMENT ME!
     *
     * @param  evt  DOCUMENT ME!
     */
    private void formMouseClicked(final java.awt.event.MouseEvent evt) { //GEN-FIRST:event_formMouseClicked
        if (evt.getClickCount() > 1) {
            if (!CismapBroker.getInstance().getMappingComponent().isInternalLayerWidgetVisible()) {
                CismapBroker.getInstance().getMappingComponent().showInternalLayerWidget(true, 300);
            } else {
                CismapBroker.getInstance().getMappingComponent().showInternalLayerWidget(false, 150);
            }
        }
    }                                                                    //GEN-LAST:event_formMouseClicked

    /**
     * DOCUMENT ME!
     *
     * @param  e  DOCUMENT ME!
     */
    @Override
    public void statusValueChanged(final StatusEvent e) {
        final Runnable modifyControls = new Runnable() {

                @Override
                public void run() {
                    if (e.getName().equals(StatusEvent.COORDINATE_STRING)) {
                        lblCoordinates.setText(e.getValue().toString());
                    } else if (e.getName().equals(StatusEvent.MEASUREMENT_INFOS)) {
                        // do nothing
                    } else if (e.getName().equals(StatusEvent.MAPPING_MODE)) {
                        // do nothing                                                          // NOI18N
                    } else if (e.getName().equals(StatusEvent.OBJECT_INFOS)) {
                        // do nothing
                    } else if (e.getName().equals(StatusEvent.SCALE)) {
                        // do nothing
                    } else if (e.getName().equals(StatusEvent.CRS)) {
                        lblCoordinates.setToolTipText(((Crs)e.getValue()).getShortname());
                    } else if (e.getName().equals(StatusEvent.RETRIEVAL_STARTED)) {
                        // do nothing
                    } else if (e.getName().equals(StatusEvent.RETRIEVAL_COMPLETED)
                                || e.getName().equals(StatusEvent.RETRIEVAL_ABORTED)
                                || e.getName().equals(StatusEvent.RETRIEVAL_REMOVED)) {
                        // do nothing
                    } else if (e.getName().equals(StatusEvent.RETRIEVAL_ERROR)) {
                        // do nothing
                    } else if (e.getName().equals(StatusEvent.MAP_EXTEND_FIXED)) {
                        // do nothing
                    } else if (e.getName().equals(StatusEvent.MAP_SCALE_FIXED)) {
                        // do nothing
                    }
                }
            };

        if (e.getName().equals(StatusEvent.MAPPING_MODE)) {
            // do nothing
        } else if (e.getName().equals(StatusEvent.RETRIEVAL_STARTED)) {
            // do nothing
        } else if (e.getName().equals(StatusEvent.RETRIEVAL_COMPLETED)) {
            // do nothing
        } else if (e.getName().equals(StatusEvent.RETRIEVAL_ABORTED)) {
            // do nothing
        } else if (e.getName().equals(StatusEvent.RETRIEVAL_ERROR)) {
            // do nothing
        } else if (e.getName().equals(StatusEvent.RETRIEVAL_REMOVED)) {
            // do nothing
        } else if (e.getName().equals(StatusEvent.RETRIEVAL_RESET)) {
            // do nothing
        }

        if (EventQueue.isDispatchThread()) {
            modifyControls.run();
        } else {
            EventQueue.invokeLater(modifyControls);
        }
    }
}
