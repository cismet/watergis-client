/***************************************************
*
* cismet GmbH, Saarbruecken, Germany
*
*              ... and it just works.
*
****************************************************/
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package de.cismet.watergis.gui.dialog;

import com.vividsolutions.jts.geom.Geometry;
import com.vividsolutions.jts.geom.GeometryCollection;
import com.vividsolutions.jts.geom.GeometryFactory;
import com.vividsolutions.jts.geom.PrecisionModel;

import org.apache.log4j.Logger;

import org.openide.util.NbBundle;

import java.awt.Component;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;

import de.cismet.cismap.commons.CrsTransformer;
import de.cismet.cismap.commons.XBoundingBox;
import de.cismet.cismap.commons.features.FeatureServiceFeature;
import de.cismet.cismap.commons.featureservice.AbstractFeatureService;
import de.cismet.cismap.commons.featureservice.H2FeatureService;
import de.cismet.cismap.commons.featureservice.factory.FeatureFactory;
import de.cismet.cismap.commons.featureservice.factory.H2FeatureServiceFactory;
import de.cismet.cismap.commons.gui.capabilitywidget.CapabilityWidget;
import de.cismet.cismap.commons.gui.layerwidget.ZoomToLayerWorker;
import de.cismet.cismap.commons.interaction.CismapBroker;

import de.cismet.tools.gui.WaitingDialogThread;

import de.cismet.watergis.broker.AppBroker;
import de.cismet.watergis.broker.ComponentName;

/**
 * DOCUMENT ME!
 *
 * @author   therter
 * @version  $Revision$, $Date$
 */
public class DissolveDialog extends javax.swing.JDialog {

    //~ Static fields/initializers ---------------------------------------------

    private static final Logger LOG = Logger.getLogger(DissolveDialog.class);

    //~ Instance fields --------------------------------------------------------

    private final AbstractFeatureService service;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton butCancel;
    private javax.swing.JButton butOk;
    private javax.swing.JComboBox cbDissolve;
    private javax.swing.JLabel labDissolveAttr;
    private javax.swing.JLabel labTableName;
    private javax.swing.JTextField txtTable;
    // End of variables declaration//GEN-END:variables

    //~ Constructors -----------------------------------------------------------

    /**
     * Creates new form DissolveDialog.
     *
     * @param  parent  DOCUMENT ME!
     * @param  modal   DOCUMENT ME!
     * @param  afs     DOCUMENT ME!
     */
    public DissolveDialog(final java.awt.Frame parent, final boolean modal, final AbstractFeatureService afs) {
        super(parent, modal);
        initComponents();
        this.service = afs;

        txtTable.setText(afs.getName() + "Dissolved");
        cbDissolve.setModel(new DefaultComboBoxModel(afs.getOrderedFeatureServiceAttributes().toArray(new String[0])));
    }

    //~ Methods ----------------------------------------------------------------

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
     * content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        labDissolveAttr = new javax.swing.JLabel();
        cbDissolve = new javax.swing.JComboBox();
        labTableName = new javax.swing.JLabel();
        txtTable = new javax.swing.JTextField();
        butOk = new javax.swing.JButton();
        butCancel = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle(org.openide.util.NbBundle.getMessage(DissolveDialog.class, "DissolveDialog.title", new Object[] {})); // NOI18N
        getContentPane().setLayout(new java.awt.GridBagLayout());

        org.openide.awt.Mnemonics.setLocalizedText(
            labDissolveAttr,
            org.openide.util.NbBundle.getMessage(
                DissolveDialog.class,
                "DissolveDialog.labDissolveAttr.text",
                new Object[] {})); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(15, 10, 15, 10);
        getContentPane().add(labDissolveAttr, gridBagConstraints);

        cbDissolve.setModel(new javax.swing.DefaultComboBoxModel(
                new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cbDissolve.setMinimumSize(new java.awt.Dimension(200, 27));
        cbDissolve.setPreferredSize(new java.awt.Dimension(200, 27));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(15, 10, 15, 10);
        getContentPane().add(cbDissolve, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(
            labTableName,
            org.openide.util.NbBundle.getMessage(
                DissolveDialog.class,
                "DissolveDialog.labTableName.text",
                new Object[] {})); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(15, 10, 15, 10);
        getContentPane().add(labTableName, gridBagConstraints);

        txtTable.setMinimumSize(new java.awt.Dimension(200, 27));
        txtTable.setPreferredSize(new java.awt.Dimension(200, 27));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(15, 10, 15, 10);
        getContentPane().add(txtTable, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(
            butOk,
            org.openide.util.NbBundle.getMessage(DissolveDialog.class, "DissolveDialog.butOk.text", new Object[] {})); // NOI18N
        butOk.setMinimumSize(new java.awt.Dimension(80, 29));
        butOk.setPreferredSize(new java.awt.Dimension(80, 29));
        butOk.addActionListener(new java.awt.event.ActionListener() {

                @Override
                public void actionPerformed(final java.awt.event.ActionEvent evt) {
                    butOkActionPerformed(evt);
                }
            });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTHWEST;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(15, 10, 15, 10);
        getContentPane().add(butOk, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(
            butCancel,
            org.openide.util.NbBundle.getMessage(
                DissolveDialog.class,
                "DissolveDialog.butCancel.text",
                new Object[] {})); // NOI18N
        butCancel.addActionListener(new java.awt.event.ActionListener() {

                @Override
                public void actionPerformed(final java.awt.event.ActionEvent evt) {
                    butCancelActionPerformed(evt);
                }
            });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTHEAST;
        gridBagConstraints.insets = new java.awt.Insets(15, 10, 15, 10);
        getContentPane().add(butCancel, gridBagConstraints);

        pack();
    } // </editor-fold>//GEN-END:initComponents

    /**
     * DOCUMENT ME!
     *
     * @param  evt  DOCUMENT ME!
     */
    private void butCancelActionPerformed(final java.awt.event.ActionEvent evt) { //GEN-FIRST:event_butCancelActionPerformed
        setVisible(false);
    }                                                                             //GEN-LAST:event_butCancelActionPerformed

    /**
     * DOCUMENT ME!
     *
     * @param  evt  DOCUMENT ME!
     */
    private void butOkActionPerformed(final java.awt.event.ActionEvent evt) { //GEN-FIRST:event_butOkActionPerformed
        final FeatureFactory factory = service.getFeatureFactory();
        final Object serviceQuery = service.getQuery();
        final String propertyName = cbDissolve.getSelectedItem().toString();
        final String tableName = txtTable.getText();
        final WaitingDialogThread<H2FeatureService> wdt = new WaitingDialogThread<H2FeatureService>(AppBroker
                        .getInstance().getWatergisApp(),
                true,
                "Dissolve",
                null,
                100) {

                @Override
                protected H2FeatureService doInBackground() throws Exception {
                    final Geometry g = ZoomToLayerWorker.getServiceBounds(service);
                    XBoundingBox bb = null;
                    int progress = 0;
                    wd.setText(NbBundle.getMessage(
                            DissolveDialog.class,
                            "DissolveDialog.butOkActionPerformed.doInBackground.retrieving"));
                    wd.setMax(100);
                    if (LOG.isDebugEnabled()) {
                        LOG.debug("retrieve all features from the service");
                    }

                    if (g != null) {
                        bb = new XBoundingBox(g);

                        try {
                            final CrsTransformer transformer = new CrsTransformer(CismapBroker.getInstance().getSrs()
                                            .getCode());
                            bb = transformer.transformBoundingBox(bb);
                        } catch (Exception e) {
                            LOG.error("Cannot transform CRS.", e);
                        }
                    }

                    final List<FeatureServiceFeature> featureList = factory.createFeatures(
                            serviceQuery,
                            bb,
                            null,
                            0,
                            0,
                            null);
                    if (LOG.isDebugEnabled()) {
                        LOG.debug("sort the features");
                    }

                    final Map<Object, List<FeatureServiceFeature>> featureMap =
                        new HashMap<Object, List<FeatureServiceFeature>>();
                    int n = 0;
                    int featureCount = featureList.size();
                    wd.setText(NbBundle.getMessage(
                            DissolveDialog.class,
                            "DissolveDialog.butOkActionPerformed.doInBackground.sorting"));

                    for (final FeatureServiceFeature f : featureList) {
                        final Object propValue = f.getProperty(propertyName);

                        List<FeatureServiceFeature> dissolvedFeature = featureMap.get(propValue);

                        if (dissolvedFeature == null) {
                            dissolvedFeature = new ArrayList<FeatureServiceFeature>();
                            dissolvedFeature.add(f);
                            featureMap.put(propValue, dissolvedFeature);
                        } else {
                            dissolvedFeature.add(f);
                        }

                        ++n;

                        if ((progress) < (n * 20 / featureCount)) {
                            progress = (n * 20 / featureCount);

                            wd.setProgress(progress);
                        }
                    }
                    if (LOG.isDebugEnabled()) {
                        LOG.debug("merge geometries");
                    }
                    wd.setText(NbBundle.getMessage(
                            DissolveDialog.class,
                            "DissolveDialog.butOkActionPerformed.doInBackground.merging"));
                    final List<FeatureServiceFeature> dissolvedFeatures = new ArrayList<FeatureServiceFeature>();
                    featureCount = featureMap.keySet().size();
                    n = 0;

                    for (final Object key : featureMap.keySet()) {
                        final List<FeatureServiceFeature> features = featureMap.get(key);
                        final FeatureServiceFeature f = features.get(0);
                        final List<Geometry> geomList = new ArrayList<Geometry>();

                        for (final FeatureServiceFeature feature : features) {
                            geomList.add(feature.getGeometry());
                        }

                        final GeometryFactory factory = new GeometryFactory(new PrecisionModel(PrecisionModel.FLOATING),
                                geomList.get(0).getSRID());
                        Geometry geom = factory.buildGeometry(geomList);

                        if (geom instanceof GeometryCollection) {
                            geom = ((GeometryCollection)geom).union();
                        }

                        f.setGeometry(geom);
                        dissolvedFeatures.add(f);
                        ++n;

                        if ((progress) < (20 + (n * 55 / featureCount))) {
                            progress = 20 + (n * 55 / featureCount);

                            wd.setProgress(progress);
                        }
                    }

                    wd.setText(NbBundle.getMessage(
                            DissolveDialog.class,
                            "DissolveDialog.butOkActionPerformed.doInBackground.creatingDatasource"));
                    final H2FeatureService internalService = new H2FeatureService(
                            tableName,
                            H2FeatureServiceFactory.DB_NAME,
                            tableName,
                            null,
                            null,
                            dissolvedFeatures);
                    if (LOG.isDebugEnabled()) {
                        LOG.debug("create the new data source");
                    }
                    internalService.initAndWait();

                    return internalService;
                }

                @Override
                protected void done() {
                    try {
                        final H2FeatureService service = get();
                        AppBroker.getInstance().getMappingComponent().getMappingModel().addLayer(service);
                        final Component capComponent = AppBroker.getInstance().getComponent(ComponentName.CAPABILITIES);

                        if (capComponent instanceof CapabilityWidget) {
                            final CapabilityWidget cap = (CapabilityWidget)capComponent;
                            cap.refreshJdbcTrees();
                        }
                    } catch (Exception ex) {
                        LOG.error("Error while dissolving features.", ex);
                    }
                }
            };

        if (H2FeatureService.tableAlreadyExists(tableName)) {
            JOptionPane.showMessageDialog(AppBroker.getInstance().getWatergisApp(),
                NbBundle.getMessage(
                    DissolveDialog.class,
                    "DissolveDialog.butOkActionPerformed.tableAlreadyExists",
                    tableName),
                NbBundle.getMessage(
                    DissolveDialog.class,
                    "DissolveDialog.butOkActionPerformed.tableAlreadyExists.title"),
                JOptionPane.ERROR_MESSAGE);
        } else {
            this.setVisible(false);
            wdt.start();
        }
    } //GEN-LAST:event_butOkActionPerformed
}
